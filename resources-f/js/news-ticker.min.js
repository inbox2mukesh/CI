!(function (t, e) {
    "use strict";
    "object" == typeof module &&
    "object" == typeof module.exports &&
    (module.exports = t.document
    ? void 0
    : function (t) {
    if (!t.document) throw new Error("");
    });
    })("undefined" != typeof window ? window : this),
    (function (t) {
    "use strict";
    (t.breakingNews = function (e, i) {
    var s = {
    effect: "scroll",
    direction: "ltr",                      
    source: "html",
    // rss2jsonApiKey: "",
    play: !0,        
    scrollSpeed:4,
    stopOnHover:!0,
    position: "auto",
    zIndex: 99999,
    },
    n = this;
    n.settings = {};
    var r = t(e),
    o = ((e = e), r.children(".bn-label")),
    a = r.children(".bn-news"),
    l = a.children("ul"),
    c = l.children("li"),
    d = r.children(".bn-controls"),        
    h = d.find(".bn-action").parent(),         
    g = !1,
    p = !0,
    m = l.children("li").length,
    b = 0,
    y = !1,
    w = function () {
    // if ((0 < o.length && ("rtl" == n.settings.direction ? a.css({ right: o.outerWidth() }) : a.css({ left: o.outerWidth() })), 0 < d.length)) {
    // var e = d.outerWidth();
    // "rtl" == n.settings.direction ? a.css({ left: e }) : a.css({ right: e });
    // }
    if ("scroll" === n.settings.effect) {
    var i = 0;
    c.each(function () {
    i += t(this).outerWidth();
    }),
    (i += 1),
    l.css({ width: i });
    }
    },
    k = function () {
        var t = parseFloat(l.css("marginLeft"));
        (t -= n.settings.scrollSpeed / 4),
            l.css({ marginLeft: t }),
            t <= -l.find("li:first-child").outerWidth() && (l.find("li:first-child").insertAfter(l.find("li:last-child")), l.css({ marginLeft: 0 })),
            !1 === g && ((window.requestAnimationFrame && requestAnimationFrame(k)) || setTimeout(k, 4));
    },

    x = function () {
    if (((g = !1), n.settings.play))
    switch (n.settings.effect) {
    case "scroll":
    "rtl" === n.settings.direction ? l.width() > a.width() && v() : l.width() > a.width() && k();
    break;
    default:
    n.pause(),
    (y = setInterval(function () {
    n.next();
    }, n.settings.delayTimer));
    }
    };
    (n.init = function () {
    if (
    ((n.settings = t.extend({}, s, i)),

    w(),
    "object" == typeof n.settings.source)
    )
    switch (n.settings.source.type) {
    case "rss":
    "rss2json" === n.settings.source.usingApi
    ? (((d = new XMLHttpRequest()).onreadystatechange = function () {

    }),
    d.open("GET", "" + n.settings.source.url + "&count=" + n.settings.source.limit + "&api_key=" + n.settings.source.rss2jsonApiKey, !0),
    d.send())
    : ((e = new XMLHttpRequest()).open(
    "GET",
    "" + encodeURIComponent('select * from rss where url="' + n.settings.source.url + '" limit ' + n.settings.source.limit) + "&format=json",
    !0
    ),

    e.send(null));

    break;
    default:
    console.log('Please check your "source" object parameter. Incorrect Value');
    }
    else "html" === n.settings.source ? ("scroll" != n.settings.effect && q(), x()) : console.log('Please check your "source" parameter. Incorrect Value');
    var e, d;
    n.settings.play ? h.find("span").removeClass("bn-play").addClass("bn-pause") : h.find("span").removeClass("bn-pause").addClass("bn-play"),
    r.on("mouseleave", function (e) {
    var i = t(document.elementFromPoint(e.clientX, e.clientY)).parents(".breaking-news-ticker")[0];
    t(this)[0] !== i && (!0 === n.settings.stopOnHover ? !0 === n.settings.play && n.play() : !0 === n.settings.play && !0 === g && n.play());
    }),
    r.on("mouseenter", function () {
    !0 === n.settings.stopOnHover && n.pause();
    }),

    t(window).on("resize", function () {
    r.width() < 480 ? (o.hide(), "rtl" == n.settings.direction ? a.css({ right: 0 }) : a.css({ left: 0 })) : (o.show(), "rtl" == n.settings.direction ? a.css({ right: o.outerWidth() }) : a.css({ left: o.outerWidth() }));
    });
    }),
    (n.pause = function () {
    (g = !0), clearInterval(y);
    }),
    (n.stop = function () {
    (g = !0), (n.settings.play = !1);
    }),
    (n.play = function () {
    x();
    }),

    n.init();
    }),
    (t.fn.breakingNews = function (e) {
    return this.each(function () {
    if (null == t(this).data("breakingNews")) {
    var i = new t.breakingNews(this, e);
    t(this).data("breakingNews", i);
    }
    });
    });
    })(jQuery);
